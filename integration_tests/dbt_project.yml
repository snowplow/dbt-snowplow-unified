name: 'snowplow_unified_integration_tests'
version: '0.15.2'
config-version: 2

profile: 'integration_tests'

dispatch:
  - macro_namespace: dbt
    search_order: ['snowplow_utils', 'dbt']

model-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
seed-paths: ["data"]
macro-paths: ["macros"]

target-path: "target"
clean-targets:
    - "target"
    - "dbt_modules"
    - "dbt_packages"

quoting:
  identifier: false
  schema: false

models:
  snowplow_unified_integration_tests:
    bind: false
    +schema: "snplw_unified_int_tests"
    source:
      bigquery:
        +enabled: "{{ target.type == 'bigquery' | as_bool() }}"
      databricks:
        +enabled: "{{ target.type in ['databricks', 'spark'] | as_bool() }}"
      default:
        +enabled: "{{ target.type in ['redshift', 'postgres'] | as_bool() }}"
      snowflake:
        +enabled: "{{ target.type == 'snowflake' | as_bool() }}"
    dummy_custom_module:
      +tags: snowplow_unified_incremental

vars:
  snowplow__enable_custom_example: false
  snowplow_unified:
    snowplow__atomic_schema: "{{target.schema ~ '_snplw_unified_int_tests'}}"
    snowplow__events_table: snowplow_unified_events_stg
    snowplow__events: "{{ ref('snowplow_unified_events_stg') }}"
    snowplow__cwv_context: snowplow_unified_cwv_context_stg
    snowplow__page_view_context: snowplow_unified_page_view_context_stg
    snowplow__consent_cmp_visible: snowplow_unified_consent_cmp_visible_stg
    snowplow__consent_preferences: snowplow_unified_consent_preferences_stg
    snowplow__iab_context: snowplow_unified_spider_context_stg
    snowplow__ua_parser_context: snowplow_unified_ua_context_stg
    snowplow__yauaa_context: snowplow_unified_yauaa_context_stg
    snowplow__screen_view_events: snowplow_unified_screen_view_context_stg
    snowplow__session_context: snowplow_unified_session_context_stg
    snowplow__geolocation_context: snowplow_unified_geolocation_context_stg
    snowplow__enable_mobile_context: false
    snowplow__start_date: "2020-07-03"
    snowplow__backfill_limit_days: 2
    snowplow__databricks_catalog: hive_metastore
    snowplow__enable_iab: true
    snowplow__enable_ua: true
    snowplow__enable_yauaa: true
    snowplow__page_view_stitching: true
    snowplow__page_view_passthroughs: ['v_collector', {'sql': 'event_id', 'alias': 'event_id2'}]
    snowplow__session_passthroughs: ['event_id', {'sql': 'event_id', 'alias': 'event_id2'}]
    snowplow__user_first_passthroughs: ['event_id', {'sql': "event_id2 || '-first'", 'alias': 'first_event_id2'}]
    snowplow__user_last_passthroughs: ['event_id', {'sql': "event_id2 || '-last'", 'alias': 'last_event_id2'}]
  # These are at a full project level because they are using in both the unified and int test models to determine which columns are needed
  snowplow__enable_consent: true
  snowplow__enable_cwv: true
  snowplow__conversion_events: [{"name": "view_page", "condition": "event_name = 'page_view'", "list_events": true, "value": "tr_total_base", "default_value": 0.5}]
  snowplow__total_all_conversions: true
  snowplow__list_event_counts: true

seeds:
  quote_columns: false
  snowplow_unified_integration_tests:
    +schema: "snplw_unified_int_tests"
    source:
      snowplow_unified_events:
        +column_types:
          app_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          etl_tstamp: timestamp
          collector_tstamp: timestamp
          dvce_created_tstamp: timestamp
          user_fingerprint: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ip_isp: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ip_organization: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ip_domain: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ip_netspeed: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          page_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_medium: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_source: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_term: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_term: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_content: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          se_label: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          se_property: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          se_value: float
          tr_orderid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_affiliation: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_total: float
          tr_tax: float
          tr_shipping: float
          tr_city: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_state: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_country: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_orderid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_sku: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_category: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_price: float
          br_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_family: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_type: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_renderengine: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_colordepth: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          os_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          os_family: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          os_manufacturer: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          dvce_type: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          dvce_ismobile: boolean
          tr_currency: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_total_base: "{{ 'decimal(9,1)' if target.type in ['databricks', 'spark'] else 'float' }}"
          tr_tax_base: float
          tr_shipping_base: float
          ti_currency: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_price_base: float
          base_currency: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          etl_tags: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          dvce_sent_tstamp: timestamp
          refr_domain_userid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_dvce_tstamp: timestamp
          derived_tstamp: timestamp
          true_tstamp: timestamp
          load_tstamp: timestamp
          contexts_com_snowplowanalytics_snowplow_client_session_1_0_0: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar(65535)' }}"
          unstruct_event_com_snowplowanalytics_mobile_screen_view_1_0_0: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar(65535)' }}"
          contexts_com_snowplowanalytics_snowplow_geolocation_context_1_0_0: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar(65535)' }}"
      snowplow_unified_web_vital_events:
        +column_types:
          app_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          etl_tstamp: timestamp
          collector_tstamp: timestamp
          dvce_created_tstamp: timestamp
          user_fingerprint: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ip_isp: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ip_organization: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ip_domain: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ip_netspeed: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          page_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_medium: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_source: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_term: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_term: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_content: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          se_label: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          se_property: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          se_value: float
          tr_orderid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_affiliation: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_total: float
          tr_tax: float
          tr_shipping: float
          tr_city: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_state: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_country: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_orderid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_sku: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_category: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_price: float
          br_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_family: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_type: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_renderengine: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_colordepth: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          os_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          os_family: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          os_manufacturer: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          dvce_type: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          dvce_ismobile: boolean
          tr_currency: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          tr_total_base: float
          tr_tax_base: float
          tr_shipping_base: float
          ti_currency: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          ti_price_base: float
          base_currency: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          etl_tags: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          dvce_sent_tstamp: timestamp
          refr_domain_userid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_dvce_tstamp: timestamp
          derived_tstamp: timestamp
          true_tstamp: timestamp
          load_tstamp: timestamp
          event_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          user_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_source: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          br_lang: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_medium: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_campaign: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          unstruct_event_com_snowplowanalytics_snowplow_consent_preferences_1_0_0: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          unstruct_event_com_snowplowanalytics_snowplow_cmp_visible_1_0_0: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
      snowplow_unified_consent_preferences:
        +column_types:
          root_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          root_tstamp: timestamp
          basis_for_processing: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          consent_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          consent_scopes: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          consent_url: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          domains_applied: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          event_type: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          gdpr_applies: boolean
      snowplow_unified_consent_cmp_visible:
        +column_types:
          root_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          root_tstamp: timestamp
          elapsed_time: float
      snowplow_unified_spider_context:
        +enabled: "{{ target.type in ['redshift', 'postgres'] | as_bool() }}"
      snowplow_unified_ua_context:
        +enabled: "{{ target.type in ['redshift', 'postgres'] | as_bool() }}"
      snowplow_unified_yauaa_context:
        +enabled: "{{ target.type in ['redshift', 'postgres'] | as_bool() }}"



    expected:
      snowplow_unified_consent_versions_expected:
        +column_types:
          consent_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          version_start_tstamp: timestamp
          consent_scopes: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          consent_url: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          domains_applied: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          is_latest_version: boolean
          last_allow_all_event: timestamp
      snowplow_unified_consent_scope_status_expected:
        +column_types:
          scope: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          total: integer
      snowplow_unified_consent_totals_expected:
        +column_types:
          consent_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          version_start_tstamp: timestamp
          consent_scopes: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          consent_url: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          domains_applied: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          is_latest_version: boolean
          last_allow_all_event: timestamp
          total_visitors: integer
          allow_all: integer
          allow_selected: integer
          allow: integer
          pending: integer
          denied: integer
          expired: integer
          withdrawn: integer
          implicit_consent: integer
          expires_in_six_months: integer
      snowplow_unified_consent_cmp_stats_expected:
        +column_types:
          event_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          domain_userid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          page_view_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          domain_sessionid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          cmp_load_time: float
          cmp_tstamp: timestamp
          first_consent_event_tstamp: timestamp
          first_consent_event_type: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          cmp_interaction_time: float
      snowplow_unified_users_expected:
        +column_types:
          start_tstamp: timestamp
          end_tstamp: timestamp
          first_page_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          last_page_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          last_page_urlquery: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_urlquery: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_medium: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_source: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          refr_term: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_term: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          mkt_content: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
      snowplow_unified_consent_users_expected:
        +column_types:
          domain_userid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          user_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          geo_country: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          cmp_events: integer
          consent_events: integer
          last_cmp_event_tstamp: timestamp
          last_consent_event_tstamp: timestamp
          last_consent_event_type: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          last_consent_scopes: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          last_consent_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          last_consent_url: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          last_domains_applied: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          last_processed_event: timestamp
          is_latest_version: boolean
      snowplow_unified_consent_log_expected:
        +column_types:
          event_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          domain_userid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          user_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          geo_country: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          page_view_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          domain_sessionid: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          derived_tstamp: timestamp
          load_tstamp: timestamp
          event_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          event_type: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          basis_for_processing: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          consent_url: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          consent_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          consent_scopes: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          domains_applied: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
          gdpr_applies: boolean
          cmp_load_time: float
          derived_tstamp_date: date
      snowplow_unified_views_expected:
          +column_types:
            app_id: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            horizontal_percentage_scrolled: float
            vertical_percentage_scrolled: float
            dvce_created_tstamp: timestamp
            collector_tstamp: timestamp
            derived_tstamp: timestamp
            start_tstamp: timestamp
            end_tstamp: timestamp
            page_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            mkt_term: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            mkt_content: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            refr_urlfragment: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            refr_medium: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            refr_source: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            refr_term: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            br_colordepth: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            br_renderengine: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            category: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            primary_impact: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            reason: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            spider_or_robot: boolean
            useragent_family: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            useragent_major: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            useragent_minor: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            useragent_patch: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            useragent_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            os_family: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            os_major: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            os_minor: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            os_patch: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            os_patch_minor: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            os_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            device_family: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            device_class: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            agent_class: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            agent_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            agent_name_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            agent_name_version_major: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            agent_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            agent_version_major: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            device_brand: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            device_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            device_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            layout_engine_class: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            layout_engine_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            layout_engine_name_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            layout_engine_name_version_major: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            layout_engine_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            layout_engine_version_major: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            operating_system_class: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            operating_system_name: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            operating_system_name_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
            operating_system_version: "{{ 'string' if target.type in ['bigquery', 'databricks', 'spark'] else 'varchar' }}"
      bigquery:
        +enabled: "{{ target.type == 'bigquery' | as_bool() }}"
        snowplow_unified_sessions_expected:
          +column_types:
            app_id: string
            start_tstamp: timestamp
            end_tstamp: timestamp
            first_page_urlfragment: string
            last_page_urlfragment: string
            refr_urlquery: string
            refr_urlfragment: string
            refr_medium: string
            refr_source: string
            refr_term: string
            mkt_term: string
            mkt_content: string
            br_renderengine: string
            category: string
            primary_impact: string
            reason: string
            spider_or_robot: boolean
            useragent_family: string
            useragent_major: string
            useragent_minor: string
            useragent_patch: string
            useragent_version: string
            os_family: string
            os_major: string
            os_minor: string
            os_patch: string
            os_patch_minor: string
            os_version: string
            device_family: string
            device_class: string
            agent_class: string
            agent_name: string
            agent_name_version: string
            agent_name_version_major: string
            agent_version: string
            agent_version_major: string
            device_brand: string
            device_name: string
            device_version: string
            layout_engine_class: string
            layout_engine_name: string
            layout_engine_name_version: string
            layout_engine_name_version_major: string
            layout_engine_version: string
            layout_engine_version_major: string
            operating_system_class: string
            operating_system_name: string
            operating_system_name_version: string
            operating_system_version: string
            cv_view_page_volume: integer
            cv_view_page_total: float
            cv_view_page_first_conversion: timestamp
            cv_view_page_converted: boolean
      databricks:
        +enabled: "{{ target.type in ['databricks', 'spark'] | as_bool() }}"
        snowplow_unified_web_vital_measurements_expected:
          +column_types:
            lcp_75p: decimal(19,3)
            fid_75p: decimal(19,3)
            cls_75p: decimal(19,3)
            ttfb_75p: decimal(19,3)
        snowplow_unified_sessions_expected:
          +column_types:
            app_id: string
            start_tstamp: timestamp
            end_tstamp: timestamp
            first_page_urlfragment: string
            last_page_urlfragment: string
            refr_urlquery: string
            refr_urlfragment: string
            refr_medium: string
            refr_source: string
            refr_term: string
            mkt_term: string
            mkt_content: string
            br_renderengine: string
            category: string
            primary_impact: string
            reason: string
            spider_or_robot: boolean
            useragent_family: string
            useragent_major: string
            useragent_minor: string
            useragent_patch: string
            useragent_version: string
            os_family: string
            os_major: string
            os_minor: string
            os_patch: string
            os_patch_minor: string
            os_version: string
            device_family: string
            device_class: string
            agent_class: string
            agent_name: string
            agent_name_version: string
            agent_name_version_major: string
            agent_version: string
            agent_version_major: string
            device_brand: string
            device_name: string
            device_version: string
            layout_engine_class: string
            layout_engine_name: string
            layout_engine_name_version: string
            layout_engine_name_version_major: string
            layout_engine_version: string
            layout_engine_version_major: string
            operating_system_class: string
            operating_system_name: string
            operating_system_name_version: string
            operating_system_version: string
            cv_view_page_volume: integer
            cv_view_page_total: decimal(9, 1)
            cv_view_page_first_conversion: timestamp
            cv_view_page_converted: boolean
      default:
        +enabled: "{{ target.type in ['redshift', 'postgres'] | as_bool() }}"
        snowplow_unified_sessions_expected:
          +column_types:
            app_id: varchar
            start_tstamp: timestamp
            end_tstamp: timestamp
            first_page_urlfragment: varchar
            last_page_urlfragment: varchar
            refr_urlquery: varchar
            refr_urlfragment: varchar
            refr_medium: varchar
            refr_source: varchar
            refr_term: varchar
            mkt_term: varchar
            mkt_content: varchar
            last_page_urlquery: varchar
            br_renderengine: varchar
            category: varchar
            primary_impact: varchar
            reason: varchar
            spider_or_robot: boolean
            useragent_family: varchar
            useragent_major: varchar
            useragent_minor: varchar
            useragent_patch: varchar
            useragent_version: varchar
            os_family: varchar
            os_major: varchar
            os_minor: varchar
            os_patch: varchar
            os_patch_minor: varchar
            os_version: varchar
            device_family: varchar
            device_class: varchar
            agent_class: varchar
            agent_name: varchar
            agent_name_version: varchar
            agent_name_version_major: varchar
            agent_version: varchar
            agent_version_major: varchar
            device_brand: varchar
            device_name: varchar
            device_version: varchar
            layout_engine_class: varchar
            layout_engine_name: varchar
            layout_engine_name_version: varchar
            layout_engine_name_version_major: varchar
            layout_engine_version: varchar
            layout_engine_version_major: varchar
            operating_system_class: varchar
            operating_system_name: varchar
            operating_system_name_version: varchar
            operating_system_version: varchar
            cv_view_page_first_conversion: timestamp
      snowflake:
        +enabled: "{{ target.type == 'snowflake' | as_bool() }}"
        snowplow_unified_sessions_expected:
          +column_types:
            app_id: varchar
            start_tstamp: timestamp
            end_tstamp: timestamp
            is_engaged: boolean
            first_page_urlfragment: varchar
            last_page_urlfragment: varchar
            refr_urlquery: varchar
            refr_urlfragment: varchar
            refr_medium: varchar
            refr_source: varchar
            refr_term: varchar
            mkt_term: varchar
            mkt_content: varchar
            last_page_urlquery: varchar
            br_renderengine: varchar
            category: varchar
            primary_impact: varchar
            reason: varchar
            spider_or_robot: boolean
            useragent_family: varchar
            useragent_major: varchar
            useragent_minor: varchar
            useragent_patch: varchar
            useragent_version: varchar
            os_family: varchar
            os_major: varchar
            os_minor: varchar
            os_patch: varchar
            os_patch_minor: varchar
            os_version: varchar
            device_family: varchar
            device_class: varchar
            agent_class: varchar
            agent_name: varchar
            agent_name_version: varchar
            agent_name_version_major: varchar
            agent_version: varchar
            agent_version_major: varchar
            device_brand: varchar
            device_name: varchar
            device_version: varchar
            layout_engine_class: varchar
            layout_engine_name: varchar
            layout_engine_name_version: varchar
            layout_engine_name_version_major: varchar
            layout_engine_version: varchar
            layout_engine_version_major: varchar
            operating_system_class: varchar
            operating_system_name: varchar
            operating_system_name_version: varchar
            operating_system_version: varchar
            cv_view_page_volume: integer
            cv_view_page_total: float
            cv_view_page_first_conversion: timestamp
            cv_view_page_converted: boolean
